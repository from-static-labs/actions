name: static
on:
  workflow_call:
      
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  static:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure GitHub Pages
        id: configure-pages
        uses: actions/configure-pages@v4
        # @todo â€“ We can probably use the preconfigured configuration at somepoint, we will just need to update our
        # changes to the next.config.js file to merge instead of overwrite.
        # with: 
        #   static_site_generator: next
      # Parses the defined static.json file for use in steps and injects "_static" internal configuration.
      - name: Parsing static.json
        id: static
        uses: actions/github-script@v7
        with:
          script: |
            /**
            * Parse a `static.json` file and return the JSON object.
            * @param {object} env - Environment packages from the Github Action (i.e. core, github, context)
            * @param {object} state - State from the Github Action (i.e. outputs)
            */
            function parse({ core }, state = {}) {
            const fs = require('fs');
            let config = {};
            try {
              config = JSON.parse(fs.readFileSync('./static.json', 'utf8'));
            } catch (e) {
              core.setFailed(`Unable to parse static.json: ${e.message}`);
            }
            // Merge GitHub Action state with the parsed static.json
            config = {
              ...config,
              _static: {
              host: {
                ...state.host,
              },
              ...config._static,
              },
            }

            try {
              validate(config);
            } catch (e) {
              core.setFailed(`Invalid static.json: ${e.message}`);
            }
            return config;
            }

            /**
            * A basic validation function for the `static.json` file.
            */
            function validate(config) {
              if (!config) {
                throw new Error('No configuration provided.');
              }
              if (!('_static' in config) || !config._static) {
                throw new Error('`_static` member not found in configuration.');
              }
              if (!config._static?.generator) {
                throw new Error('A `generator` is required in a `_static` configuration.');
              }
              if (config._static?.ecosystem && config._static?.ecosystem !== 'npm') {
                throw new Error('Unknown ecosystem provided. `npm` is currently the only official supported ecosystem.');
              }
              return true;
            }

            const utils = { parse, validate };

            return utils.parse({ core }, {
              host: {
                "base_url": "${{ steps.configure-pages.outputs.base_url }}",
                "origin": "${{ steps.configure-pages.outputs.origin }}",
                "host": "${{ steps.configure-pages.outputs.host }}",
                "base_path": "${{ steps.configure-pages.outputs.base_path }}",
              }
            });
      # Build the application and create an artifact for deployment.
      - name: Configure Node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/iron
      - name: Install Dependencies
        run: npm ci
      - name: Obtain Generator Version
        run: |
          echo "GENERATOR_VERSION=$(npm show ${{ fromJson(steps.static.outputs.result)._static.generator.name }} --json | jq '.version')" >> $GITHUB_ENV
      # Obtrains the repository URL from the generator's npm package and converts it to `<owner>/<repo>` format for actions/checkout.
      - name: Obtain Generator Repository
        run: |
          echo "GENERATOR_REPOSITORY=$(
            npm show ${{ fromJson(steps.static.outputs.result)._static.generator.name }} --json
              | jq '.repository.url'
              | sed 's/git+https:\/\/github.com\///'
              | sed 's/.git//'
          )" >> $GITHUB_ENV
      # Clone the generator repository and checkout the version specified in the static.json file.
      - name: Cloning Generator
        uses: actions/checkout@v4
        with:
          repository: ${{env.GENERATOR_REPOSITORY}}
          ref: ${{env.GENERATOR_VERSION}}
          path: '.static--generator'
      # Ensure the static.json file is the user-defined file and not the generator's file.
      - name: Replacing static.json in Generator
        run: |
          echo -e '${{steps.static.outputs.result}}' > ./.static--generator/static.json
      # Call the ecosystem's default install and build command.
      - name: "Building from ${{ fromJson(steps.static.outputs.result)._static.generator.name }}"
        run: cd ./.static--generator && npm ci && npm run build
      - name: Copying Output to Base Directory
        run: cp -r ./.static--generator/out ./out
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4